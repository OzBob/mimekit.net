<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Creating Messages</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="CreatingMessages" /><meta name="Description" content="MimeKit provides a number of ways to create messages." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MimeKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="MimeKit Documentation" tocid="roottoc">MimeKit Documentation</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="Introduction.htm" title="Introduction" tocid="Introduction">Introduction</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="License.htm" title="License Agreement" tocid="License">License Agreement</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="GettingStarted.htm" title="Getting Started" tocid="GettingStarted">Getting Started</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="CreatingMessages.htm" title="Creating Messages" tocid="CreatingMessages">Creating Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="ParsingMessages.htm" title="Parsing Messages" tocid="ParsingMessages">Parsing Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithMessages.htm" title="Working with Messages" tocid="WorkingWithMessages">Working with Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithPGP.htm" title="Working with OpenPGP" tocid="WorkingWithPGP">Working with OpenPGP</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithSMime.htm" title="Working with S/MIME" tocid="WorkingWithSMime">Working with S/MIME</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="FrequentlyAskedQuestions.htm" title="Frequently Asked Questions" tocid="FrequentlyAskedQuestions">Frequently Asked Questions</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn">Creating Messages</td></tr></table><span class="introStyle"></span><div class="introduction"><p>MimeKit provides a number of ways to create messages.</p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreatingSimpleMessage">Creating a Simple Message</a></li><li class="outlineSectionEntry"><a href="#CreateMessageWithAttachments">Creating a Message with Attachments</a></li><li class="outlineSectionEntry"><a href="#UsingBodyBuilder">Using a BodyBuilder</a></li><li class="outlineSectionEntry"><a href="#SystemNetMail">Importing from System.Net.Mail</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="CreatingSimpleMessage"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a Simple Message</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Creating MIME messages using MimeKit is really trivial.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>));
message.To.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>));
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

message.Body = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) {
    Text = <span class="highlight-literal">@"Hey Alice,

What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.

Will you be my +1?

-- Joey
"</span>
};</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEAAA");</script><p>
          A <a href="T_MimeKit_TextPart.htm">TextPart</a> is a leaf-node
          MIME part with a text media-type. The first argument to the TextPart constructor
          specifies the media-subtype, in this case, <span class="literal">plain</span>. Another
          media subtype you are probably familiar with is the <span class="literal">html</span>
          subtype. Some other examples include <span class="literal">enriched</span>,
          <span class="literal">rtf</span>, and <span class="literal">xml</span>.
        </p><p>
          The <a href="P_MimeKit_TextPart_Text.htm">Text</a> property
          is the easiest way to both get and set the string content of the MIME part.
        </p></div><div class="collapsibleAreaRegion" id="CreateMessageWithAttachments"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a Message with Attachments</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Attachments are just like any other
          <a href="T_MimeKit_MimePart.htm">MimePart</a>, the only difference
          is that they typically have a <span class="literal">Content-Disposition</span> header with a
          value of <span class="literal">attachment</span> instead of <span class="literal">inline</span> or no
          <span class="literal">Content-Disposition</span> header at all.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>));
message.To.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>));
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

<span class="highlight-comment">// create our message text, just like before (except don't set it as the message.Body)</span>
<span class="highlight-keyword">var</span> body = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) {
    Text = <span class="highlight-literal">@"Hey Alice,

What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.

Will you be my +1?

-- Joey
"</span>
};

<span class="highlight-comment">// create an image attachment for the file located at path</span>
<span class="highlight-keyword">var</span> attachment = <span class="highlight-keyword">new</span> MimePart (<span class="highlight-literal">"image"</span>, <span class="highlight-literal">"gif"</span>) {
    ContentObject = <span class="highlight-keyword">new</span> ContentObject (File.OpenRead (path), ContentEncoding.Default),
    ContentDisposition = <span class="highlight-keyword">new</span> ContentDisposition (ContentDisposition.Attachment),
    ContentTransferEncoding = ContentEncoding.Base64,
    FileName = Path.GetFileName (path)
};

<span class="highlight-comment">// now create the multipart/mixed container to hold the message text and the</span>
<span class="highlight-comment">// image attachment</span>
<span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> Multipart (<span class="highlight-literal">"mixed"</span>);
multipart.Add (body);
multipart.Add (attachment);

<span class="highlight-comment">// now set the multipart/mixed as the message body</span>
message.Body = multipart;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACADAAA");</script><p>
          Of course, that is just a simple example. A lot of modern mail clients such as Outlook
          or Thunderbird will send out both a <span class="literal">text/html</span> and a
          <span class="literal">text/plain</span> version of the message text. To do this, you'd create a
          <a href="T_MimeKit_TextPart.htm">TextPart</a> for each part and then
          add them to a <span class="literal">multipart/alternative</span> like so:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> attachment = CreateImageAttachment ();
<span class="highlight-keyword">var</span> plain = CreateTextPlainPart ();
<span class="highlight-keyword">var</span> html = CreateTextHtmlPart ();

<span class="highlight-comment">// Note: it is important that the text/html part is added second, because it is the</span>
<span class="highlight-comment">// most expressive version and (probably) the most faithful to the sender's WYSIWYG </span>
<span class="highlight-comment">// editor.</span>
<span class="highlight-keyword">var</span> alternative = <span class="highlight-keyword">new</span> Multipart (<span class="highlight-literal">"alternative"</span>);
alternative.Add (plain);
alternative.Add (html);

<span class="highlight-comment">// now create the multipart/mixed container to hold the multipart/alternative</span>
<span class="highlight-comment">// and the image attachment</span>
<span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> Multipart (<span class="highlight-literal">"mixed"</span>);
multipart.Add (alternative);
multipart.Add (attachment);

<span class="highlight-comment">// now set the multipart/mixed as the message body</span>
message.Body = multipart;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="UsingBodyBuilder"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using a BodyBuilder</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          If you are used to <a href="http://msdn2.microsoft.com/en-us/library/dk1fb84h" target="_blank">System.Net.Mail</a>'s API
          for creating messages, you will probably find using a
          <a href="T_MimeKit_BodyBuilder.htm">BodyBuilder</a> much more friendly
          than manually creating the tree of MIME parts. Here's how you could create a message
          body using a <a href="T_MimeKit_BodyBuilder.htm">BodyBuilder</a>:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>));
message.To.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>));
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

<span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> BodyBuilder ();

<span class="highlight-comment">// Set the plain-text version of the message text</span>
builder.TextBody = <span class="highlight-literal">@"Hey Alice,

What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.

Will you be my +1?

-- Joey
"</span>;

<span class="highlight-comment">// Set the html version of the message text</span>
builder.HtmlBody = <span class="highlight-literal">@"&lt;p&gt;Hey Alice,&lt;br&gt;
&lt;p&gt;What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.&lt;br&gt;
&lt;p&gt;Will you be my +1?&lt;br&gt;
&lt;p&gt;-- Joey&lt;br&gt;
&lt;center&gt;&lt;img src="</span><span class="highlight-literal">"sexy-pose.jpg"</span><span class="highlight-literal">"&gt;&lt;/center&gt;"</span>;

<span class="highlight-comment">// Since sexy-pose.jpg is referenced from the html text, we'll need to add it</span>
<span class="highlight-comment">// to builder.LinkedResources</span>
builder.LinkedResources.Add (<span class="highlight-literal">"C:\\Users\\Joey\\Documents\\Selfies\\sexy-pose.jpg"</span>);

<span class="highlight-comment">// We may also want to attach a calendar event for Monica's party...</span>
builder.Attachments.Add (<span class="highlight-literal">"C:\\Users\Joey\\Documents\\party.ics"</span>);

<span class="highlight-comment">// Now we just need to set the message body and we're done</span>
message.Body = builder.ToMessageBody ();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="SystemNetMail"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Importing from System.Net.Mail</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          To make things even simpler still, MimeKit allows you to explicitly cast
          a <a href="http://msdn2.microsoft.com/en-us/library/8t22a8ww" target="_blank">MailMessage</a>
          to a <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>.
        </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="ParsingMessages.htm">Parsing Messages</a></div></div></div></div><div id="pageFooter" class="pageFooter"><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-63841238-1', 'auto'); ga('send', 'pageview');</script></div></body></html>