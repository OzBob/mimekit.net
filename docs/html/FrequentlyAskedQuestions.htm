<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Frequently Asked Questions</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="FrequentlyAskedQuestions" /><meta name="Description" content="(Note: for the TL;DR version, skip to the end)" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MimeKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="MimeKit Documentation" tocid="roottoc">MimeKit Documentation</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="Introduction.htm" title="Introduction" tocid="Introduction">Introduction</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="License.htm" title="License Agreement" tocid="License">License Agreement</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="GettingStarted.htm" title="Getting Started" tocid="GettingStarted">Getting Started</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="CreatingMessages.htm" title="Creating Messages" tocid="CreatingMessages">Creating Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="ParsingMessages.htm" title="Parsing Messages" tocid="ParsingMessages">Parsing Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithMessages.htm" title="Working with Messages" tocid="WorkingWithMessages">Working with Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithPGP.htm" title="Working with OpenPGP" tocid="WorkingWithPGP">Working with OpenPGP</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithSMime.htm" title="Working with S/MIME" tocid="WorkingWithSMime">Working with S/MIME</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="FrequentlyAskedQuestions.htm" title="Frequently Asked Questions" tocid="FrequentlyAskedQuestions">Frequently Asked Questions</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn">Frequently Asked Questions</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#MessageBody">How do I get the message body?</a></li><li class="outlineSectionEntry"><a href="#EmailAddresses">How do I get the email addresses in the From, To, and Cc headers?</a></li><li class="outlineSectionEntry"><a href="#DecryptInlinePGP">How do I decrypt PGP messages that are embedded in the main message text?</a></li><li class="outlineSectionEntry"><a href="#ParseWebRequestFormData">How would I parse multipart/form-data from an HTTP web request?</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="MessageBody"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I get the message body?</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          (Note: for the TL;DR version, skip to the end)
        </p><p>
          MIME is a tree structure of parts. There are multiparts which contain other parts
          (even other multiparts). There are message parts which contain messages. And finally,
          there are leaf-node parts which contain content.
        </p><p>
          There are a few common message structures:
        </p><ol><li id="MessageBodyExample1"><p>
              The message contains only a <span class="literal">text/plain</span> or
              <span class="literal">text/html</span> part (easy, just use that).
            </p></li><li id="MessageBodyExample2"><p>
              The message contains a <span class="literal">multipart/alternative</span>
              which will typically look a bit like this:<pre>
multipart/alternative
  text/plain
  text/html</pre></p></li><li id="MessageBodyExample3"><p>
              Same as above, but the html part is inside a <span class="literal">multipart/related</span> so
              that it can embed images:<pre>
multipart/alternative
  text/plain
  multipart/related
    text/html
    image/jpeg
    image/png</pre></p></li><li id="MessageBodyExample4"><p>
              The message contains a textual body part as well as some attachments:<pre>
multipart/mixed
  text/plain
  application/octet-stream
  application/zip</pre></p></li><li id="MessageBodyExample5"><p>
              The same as above, but with the first part replaced with either
              <a href="FrequentlyAskedQuestions.htm#MessageBodyExample2">#2</a> or
              <a href="FrequentlyAskedQuestions.htm#MessageBodyExample3">#3</a>
              To illustrate:<pre>
multipart/mixed
  multipart/alternative
    text/plain
    text/html
  application/octet-stream
  application/zip</pre></p><p>
              Or:<pre>
multipart/mixed
  multipart/alternative
    text/plain
    multipart/related
      text/html
      image/jpeg
      image/png
  application/octet-stream
  application/zip</pre></p></li></ol><p>
          For your convenience, the <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>
          class has 2 properties that you may find useful:
          <a href="P_MimeKit_MimeMessage_TextBody.htm">TextBody</a> and
          <a href="P_MimeKit_MimeMessage_HtmlBody.htm">HtmlBody</a>.
        </p><p>
          For more information, see <a href="WorkingWithMessages.htm">Working with Messages</a>.
        </p></div><div class="collapsibleAreaRegion" id="EmailAddresses"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I get the email addresses in the From, To, and Cc headers?</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The <a href="P_MimeKit_MimeMessage_From.htm">From</a>,
          <a href="P_MimeKit_MimeMessage_To.htm">To</a>, and
          <a href="P_MimeKit_MimeMessage_Cc.htm">Cc</a>
          properties of a <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>
          are all of type <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a>.
          An <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a> is a list of
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items.
          This is where some people start to get lost, conceptually, because
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> is an
          abstract class that only really has a
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a>
          property.
        </p><p>
          As you've probably already discovered, the
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a>
          property contains the name of the person (if available), but what you probably
          want is his or her email address, not their name. So how do you get it?
        </p><p>
          To get the email address, you'll need to figure out what subclass of address each
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> really is.
          There are 2 direct subclasses of
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a>. They are:
          <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> and
          <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>.
        </p><p>
          A <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> is a named group
          of more <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items that
          are contained within the
          <a href="P_MimeKit_GroupAddress_Members.htm">Members</a> property. To
          get an idea of what a group address represents, consider the following examples:
        </p><p><span class="literal">
            To: My Friends: Joey &lt;joey@friends.com&gt;, Monica &lt;monica@friends.com&gt;,
            "Mrs. Chanandler Bong" &lt;chandler@friends.com&gt;, Ross &lt;ross@friends.com&gt;,
            Rachel &lt;rachel@friends.com&gt;;
          </span></p><p>
          In the above example, the <a href="P_MimeKit_MimeMessage_To.htm">To</a>
          header's <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a> will
          contain only 1 item which will be a
          <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> with a
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a> value of
          <span class="literal">My Friends</span>. The
          <a href="P_MimeKit_GroupAddress_Members.htm">Members</a> property of
          the <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> will contain 5
          more <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items (which
          will all be instances of <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>).
        </p><p>
          The above example, however, is not very likely to ever be seen in messages you deal with.
          A far more common example would be the one below:
        </p><p><span class="literal">To: undisclosed-recipients:;</span></p><p>
          Most of the time, the <a href="P_MimeKit_MimeMessage_From.htm">From</a>,
          <a href="P_MimeKit_MimeMessage_To.htm">To</a>, and
          <a href="P_MimeKit_MimeMessage_Cc.htm">Cc</a> headers will only
          contain mailbox addresses. As you will notice, a
          <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a> has an
          <a href="P_MimeKit_MailboxAddress_Address.htm">Address</a> property
          which will contain the email address of the mailbox. In the following example, the
          <a href="P_MimeKit_MailboxAddress_Address.htm">Address</a> property
          will contain the value <span class="literal">john@smith.com</span>:
        </p><p><span class="literal">To: John Smith &lt;john@smith.com&gt;</span></p><p>
          If you only care about getting a flattened list of the mailbox addresses in one of
          the address headers, you can simply do something like this:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> mailbox <span class="highlight-keyword">in</span> message.To.Mailboxes)
    Console.WriteLine (<span class="highlight-literal">"{0}'s email address is {1}"</span>, mailbox.Name, mailbox.Address);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="DecryptInlinePGP"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I decrypt PGP messages that are embedded in the main message text?</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          Some PGP-enabled mail clients, such as <strong>Thunderbird</strong>, embed
          encrypted PGP blurbs within the <span class="literal">text/plain</span> body of the message
          rather than using the PGP/MIME format that MimeKit prefers.
        </p><p>
          These messages often look something like this:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Return-Path: &lt;pgp-enthusiast@example.com&gt;
Received: from [127.0.0.1] (hostname.example.com. [201.95.8.17])
    by mx.google.com with ESMTPSA id l67sm26628445yha.8.2014.04.27.13.49.44
    for &lt;pgp-enthusiast@example.com&gt;
    (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
    Sun, 27 Apr 2014 13:49:44 -0700 (PDT)
Message-ID: &lt;535D6D67.8020803@example.com&gt;
Date: Sun, 27 Apr 2014 17:49:43 -0300
From: Die-Hard PGP Fan &lt;pgp-enthusiast@example.com&gt;
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.4.0
MIME-Version: 1.0
To: undisclosed-recipients:;
Subject: Test of inline encrypted PGP blocks
X-Enigmail-Version: 1.6
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
X-Antivirus: avast! (VPS 140427-1, 27/04/2014), Outbound message
X-Antivirus-Status: Clean

-----BEGIN PGP MESSAGE-----
Charset: ISO-8859-1
Version: GnuPG v2.0.22 (MingW32)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

SGFoISBJIGZvb2xlZCB5b3UsIHRoaXMgdGV4dCBpc24ndCBhY3R1YWxseSBlbmNy
eXB0ZWQgd2l0aCBQR1AsCml0J3MgYWN0dWFsbHkgb25seSBiYXNlNjQgZW5jb2Rl
ZCEKCkknbSBqdXN0IHVzaW5nIHRoaXMgYXMgYW4gZXhhbXBsZSwgdGhvdWdoLCBz
byBpdCBkb2Vzbid0IHJlYWxseSBtYXR0ZXIuCgpGb3IgdGhlIHNha2Ugb2YgYXJn
dW1lbnQsIHdlJ2xsIHByZXRlbmQgdGhhdCB0aGlzIGlzIGFjdHVhbGx5IGFuIGVu
Y3J5cHRlZApibHVyYi4gTW1ta2F5PyBUaGFua3MuCg==
-----END PGP MESSAGE-----</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEACAAA");</script><p>
          To deal with these kinds of messages, MimeKit's
          <a href="T_MimeKit_Cryptography_OpenPgpContext.htm">OpenPgpContext</a>
          includes a
          <a href="Overload_MimeKit_Cryptography_OpenPgpContext_GetDecryptedStream.htm">GetDecryptedStream<span id="LST7885CE3A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7885CE3A_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>
          method which can be used to get the raw decrypted stream.
        </p><p>
          The method variant that has a
          <a href="T_MimeKit_Cryptography_DigitalSignatureCollection.htm">DigitalSignatureCollection</a>
          output parameter is useful in cases where the encrypted PGP blurb is also digitally signed,
          allowing you to get your hands on the list of digitial signatures in order for you to verify
          each of them.
        </p><p>
          To decrypt the sample message above, you could use the following code snippet:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">static</span> Stream Decrypt (MimeMessage message)
{
    <span class="highlight-keyword">var</span> text = message.TextBody;

    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> memory = <span class="highlight-keyword">new</span> MemoryStream (Encoding.ASCII.GetBytes (text), <span class="highlight-keyword">false</span>)) {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MyGnuPGContext ()) {
            <span class="highlight-keyword">return</span> ctx.GetDecryptedStream (memory);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="ParseWebRequestFormData"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How would I parse multipart/form-data from an HTTP web request?</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Since classes like <span class="nolink">HttpWebRequest</span>
          take care of parsing the HTTP headers (which includes the <span class="literal">Content-Type</span> header)
          and only offer a content stream to consume, MimeKit provides a way to deal with this using the
          following two static methods on <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a>:
          <a href="M_MimeKit_MimeEntity_Load_1.htm">Load(ParserOptions, ContentType, Stream, CancellationToken)</a>
          and
          <a href="M_MimeKit_MimeEntity_Load.htm">Load(ContentType, Stream, CancellationToken)</a></p><p>
          Here's how you might use these methods:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">MimeEntity ParseMultipartFormData (HttpWebResponse response)
{
    <span class="highlight-keyword">var</span> contentType = ContentType.Parse (response.ContentType);

    <span class="highlight-keyword">return</span> MimeEntity.Parse (contentType, response.GetResponseStream ());
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACABAAA");</script><p>
          If the multipart/form-data HTTP response is expected to be large and you do
          not wish for the content to be read into memory, you can use the following
          approach:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">MimeEntity ParseMultipartFormData (HttpWebResponse response)
{
    <span class="highlight-comment">// create a temporary file to store our large HTTP data stream</span>
    <span class="highlight-keyword">var</span> tmp = Path.GetTempFileName ();

    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Open (tmp, FileMode.Open, FileAccess.ReadWrite)) {
        <span class="highlight-comment">// create a header for the multipart/form-data MIME entity based on the Content-Type value of the HTTP</span>
        <span class="highlight-comment">// response</span>
        <span class="highlight-keyword">var</span> header = Encoding.UTF8.GetBytes (<span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"Content-Type: {0}\r\n\r\n"</span>, response.ContentType));

        <span class="highlight-comment">// write the header to the stream</span>
        stream.Write (header, <span class="highlight-number">0</span>, header.Length);

        <span class="highlight-comment">// copy the content of the HTTP response to our temporary stream</span>
        response.GetResponseStream ().CopyTo (stream);

        <span class="highlight-comment">// reset the stream back to the beginning</span>
        stream.Position = <span class="highlight-number">0</span>;

        <span class="highlight-comment">// parse the MIME entity with persistent = true, telling the parser not to load the content into memory</span>
        <span class="highlight-keyword">return</span> MimeEntity.Load (stream, persistent: <span class="highlight-keyword">true</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="WorkingWithMessages.htm">Working with Messages</a></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>